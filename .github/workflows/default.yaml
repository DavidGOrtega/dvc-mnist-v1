name: CML

on: [push, pull_request]

jobs:
  job3:
    # runs-on: [self-hosted]
    runs-on: [ubuntu-latest]
    # container:
      #image: docker://davidgortega/dvc-cml:dev

    steps:
      - uses: actions/checkout@v2

      - name: dvc_action_run
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          baseline: 'HEAD~1'
          repro_targets: 'train.dvc'
          metrics_format: '0[.][000]'
          #dvc_pull: 'models,data'
          skip_push: true
          push_targets: 'models,data'

        run: |
          test $# -ge 1 || { echo "usage: $0 write-size [wait-time]"; exit 1; }
          test $# -ge 2 || set -- "$@" 1
          bytes_written=$(
          {
              exec 3>&1
              {
                  perl -e '
                      $size = $ARGV[0];
                      $block = q(a) x $size;
                      $num_written = 0;
                      sub report { print STDERR $num_written * $size, qq(\n); }
                      report; while (defined syswrite STDOUT, $block) {
                          $num_written++; report;
                      }
                  ' "$1" 2>&3
              } | (sleep "$2"; exec 0<&-);
          } | tail -1
          )
          printf "write size: %10d; bytes successfully before error: %d\n" \
          "$1" "$bytes_written"

          

  # default:
  #   runs-on: ubuntu-latest
  #   # container: docker://davidgortega/dvc:0.1.6

  #   steps:
  #     - uses: actions/checkout@v2
      
  #     - name: setup python 
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: 3.6

  #     - uses: DavidGOrtega/dvc-action-docker@master
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         repro_targets: eval.dvc
  #         run: |
  #           pip install tensorflow wget &&
  #           github_run
